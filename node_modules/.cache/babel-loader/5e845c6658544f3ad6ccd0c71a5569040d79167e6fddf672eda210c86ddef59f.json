{"ast":null,"code":"import { useRouter } from 'vue-router';\nimport { useAppStore } from '@/stores/app';\nexport default {\n  name: 'CalculatePage',\n  setup() {\n    const router = useRouter();\n    const appStore = useAppStore();\n\n    // 语言感知的导航函数\n    const navigateTo = path => {\n      const currentPath = router.currentRoute.value.path;\n      const isEnglish = currentPath.startsWith('/en');\n      const targetPath = isEnglish ? `/en${path}` : path;\n      router.push(targetPath);\n    };\n    return {\n      router,\n      appStore,\n      navigateTo\n    };\n  },\n  data() {\n    return {\n      numbers: [null, null, null],\n      calculating: false\n    };\n  },\n  computed: {\n    isValidInput() {\n      return this.numbers.every(num => num !== null && num >= 1 && num <= 99 && !isNaN(num));\n    }\n  },\n  methods: {\n    async calculateFortune() {\n      if (!this.isValidInput) return;\n      this.calculating = true;\n      try {\n        // 模拟AI计算过程\n        await new Promise(resolve => setTimeout(resolve, 3000));\n\n        // 生成模拟的算命结果\n        const mockResult = {\n          numbers: [...this.numbers],\n          result: this.generateMockFortune(),\n          timestamp: new Date().toISOString()\n        };\n\n        // 保存结果到store\n        this.appStore.saveFortuneResult(mockResult);\n\n        // 这里应该调用DeepSeek API\n        console.log('计算数字:', this.numbers);\n\n        // 跳转到结果页面\n        this.navigateTo('/result');\n      } catch (error) {\n        console.error('算命失败:', error);\n        alert('算命失败，请重试');\n      } finally {\n        this.calculating = false;\n      }\n    },\n    generateMockFortune() {\n      const fortunes = [{\n        title: '大吉',\n        description: '今日运势极佳，事业顺利，财源广进。',\n        advice: '宜：出行、投资、求财\\n忌：懈怠、争吵',\n        luck: 95\n      }, {\n        title: '中吉',\n        description: '运势平稳上升，贵人相助，心想事成。',\n        advice: '宜：学习、交友、合作\\n忌：冲动、决策',\n        luck: 80\n      }, {\n        title: '小吉',\n        description: '运势一般，需要耐心等待时机。',\n        advice: '宜：静心、储蓄、养生\\n忌：冒险、借贷',\n        luck: 65\n      }];\n\n      // 根据数字生成结果\n      const sum = this.numbers.reduce((a, b) => a + b, 0);\n      const index = sum % fortunes.length;\n      return fortunes[index];\n    }\n  }\n};","map":{"version":3,"names":["useRouter","useAppStore","name","setup","router","appStore","navigateTo","path","currentPath","currentRoute","value","isEnglish","startsWith","targetPath","push","data","numbers","calculating","computed","isValidInput","every","num","isNaN","methods","calculateFortune","Promise","resolve","setTimeout","mockResult","result","generateMockFortune","timestamp","Date","toISOString","saveFortuneResult","console","log","error","alert","fortunes","title","description","advice","luck","sum","reduce","a","b","index","length"],"sources":["/Users/Jordan/workSpace/temple/src/views/CalculatePage.vue"],"sourcesContent":["<template>\n  <div class=\"calculate-page\">\n    <div class=\"container\">\n      <h1>{{ $t('calculate.title') }}</h1>\n      <div class=\"calculate-container\">\n        <div class=\"description\">\n          <h2>小六壬神算</h2>\n          <p>请输入三个数字（1-99），神明将为您指点迷津</p>\n        </div>\n        \n        <div class=\"input-section\">\n          <div class=\"number-inputs\">\n            <div class=\"input-group\">\n              <label>第一个数字</label>\n              <input\n                type=\"number\"\n                v-model.number=\"numbers[0]\"\n                min=\"1\"\n                max=\"99\"\n                placeholder=\"1-99\"\n                class=\"number-input\"\n              />\n            </div>\n            <div class=\"input-group\">\n              <label>第二个数字</label>\n              <input\n                type=\"number\"\n                v-model.number=\"numbers[1]\"\n                min=\"1\"\n                max=\"99\"\n                placeholder=\"1-99\"\n                class=\"number-input\"\n              />\n            </div>\n            <div class=\"input-group\">\n              <label>第三个数字</label>\n              <input\n                type=\"number\"\n                v-model.number=\"numbers[2]\"\n                min=\"1\"\n                max=\"99\"\n                placeholder=\"1-99\"\n                class=\"number-input\"\n              />\n            </div>\n          </div>\n          \n          <button\n            @click=\"calculateFortune\"\n            :disabled=\"!isValidInput || calculating\"\n            class=\"calculate-btn\"\n          >\n            <span v-if=\"calculating\">算命中...</span>\n            <span v-else>开始算命</span>\n          </button>\n        </div>\n        \n        <div v-if=\"calculating\" class=\"calculating-animation\">\n          <div class=\"spinner\"></div>\n          <p>神明正在为您指点迷津...</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useRouter } from 'vue-router'\nimport { useAppStore } from '@/stores/app'\n\nexport default {\n  name: 'CalculatePage',\n  setup() {\n    const router = useRouter()\n    const appStore = useAppStore()\n    \n    // 语言感知的导航函数\n    const navigateTo = (path) => {\n      const currentPath = router.currentRoute.value.path\n      const isEnglish = currentPath.startsWith('/en')\n      const targetPath = isEnglish ? `/en${path}` : path\n      router.push(targetPath)\n    }\n    \n    return {\n      router,\n      appStore,\n      navigateTo\n    }\n  },\n  data() {\n    return {\n      numbers: [null, null, null],\n      calculating: false\n    }\n  },\n  computed: {\n    isValidInput() {\n      return this.numbers.every(num => \n        num !== null && \n        num >= 1 && \n        num <= 99 && \n        !isNaN(num)\n      )\n    }\n  },\n  methods: {\n    async calculateFortune() {\n      if (!this.isValidInput) return\n      \n      this.calculating = true\n      \n      try {\n        // 模拟AI计算过程\n        await new Promise(resolve => setTimeout(resolve, 3000))\n        \n        // 生成模拟的算命结果\n        const mockResult = {\n          numbers: [...this.numbers],\n          result: this.generateMockFortune(),\n          timestamp: new Date().toISOString()\n        }\n        \n        // 保存结果到store\n        this.appStore.saveFortuneResult(mockResult)\n        \n        // 这里应该调用DeepSeek API\n        console.log('计算数字:', this.numbers)\n        \n        // 跳转到结果页面\n        this.navigateTo('/result')\n        \n      } catch (error) {\n        console.error('算命失败:', error)\n        alert('算命失败，请重试')\n      } finally {\n        this.calculating = false\n      }\n    },\n    \n    generateMockFortune() {\n      const fortunes = [\n        {\n          title: '大吉',\n          description: '今日运势极佳，事业顺利，财源广进。',\n          advice: '宜：出行、投资、求财\\n忌：懈怠、争吵',\n          luck: 95\n        },\n        {\n          title: '中吉',\n          description: '运势平稳上升，贵人相助，心想事成。',\n          advice: '宜：学习、交友、合作\\n忌：冲动、决策',\n          luck: 80\n        },\n        {\n          title: '小吉',\n          description: '运势一般，需要耐心等待时机。',\n          advice: '宜：静心、储蓄、养生\\n忌：冒险、借贷',\n          luck: 65\n        }\n      ]\n      \n      // 根据数字生成结果\n      const sum = this.numbers.reduce((a, b) => a + b, 0)\n      const index = sum % fortunes.length\n      \n      return fortunes[index]\n    }\n  }\n}\n</script>\n\n<style scoped>\n.calculate-page {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n}\n\n.container {\n  max-width: 600px;\n  width: 100%;\n}\n\nh1 {\n  text-align: center;\n  color: white;\n  margin-bottom: 2rem;\n  font-size: 2.5rem;\n}\n\n.calculate-container {\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 20px;\n  padding: 2rem;\n  backdrop-filter: blur(10px);\n}\n\n.description {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.description h2 {\n  color: #333;\n  margin-bottom: 1rem;\n  font-size: 1.8rem;\n}\n\n.description p {\n  color: #666;\n  font-size: 1.1rem;\n}\n\n.input-section {\n  margin-bottom: 2rem;\n}\n\n.number-inputs {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.input-group {\n  display: flex;\n  flex-direction: column;\n}\n\n.input-group label {\n  margin-bottom: 0.5rem;\n  color: #333;\n  font-weight: 600;\n  text-align: center;\n}\n\n.number-input {\n  padding: 1rem;\n  border: 2px solid #ddd;\n  border-radius: 10px;\n  font-size: 1.2rem;\n  text-align: center;\n  transition: border-color 0.3s ease;\n}\n\n.number-input:focus {\n  outline: none;\n  border-color: #667eea;\n}\n\n.calculate-btn {\n  width: 100%;\n  padding: 1rem;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border: none;\n  border-radius: 10px;\n  font-size: 1.2rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.calculate-btn:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n}\n\n.calculate-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.calculating-animation {\n  text-align: center;\n  padding: 2rem;\n}\n\n.spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #667eea;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin: 0 auto 1rem;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.calculating-animation p {\n  color: #666;\n  font-size: 1.1rem;\n}\n\n@media (max-width: 768px) {\n  .number-inputs {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n  }\n  \n  .container {\n    padding: 1rem;\n  }\n  \n  h1 {\n    font-size: 2rem;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}