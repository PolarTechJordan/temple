{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"initial-page fullscreen temple-bg\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"video-container\"\n};\nconst _hoisted_3 = {\n  class: \"loading-placeholder\"\n};\nconst _hoisted_4 = {\n  class: \"content-wrapper\"\n};\nconst _hoisted_5 = {\n  class: \"video-section\"\n};\nconst _hoisted_6 = [\"src\"];\nconst _hoisted_7 = {\n  class: \"ripple-effect\",\n  ref: \"rippleElement\"\n};\nconst _hoisted_8 = {\n  class: \"title-section\"\n};\nconst _hoisted_9 = {\n  class: \"main-title\"\n};\nconst _hoisted_10 = {\n  class: \"subtitle\"\n};\nconst _hoisted_11 = {\n  class: \"description\"\n};\nconst _hoisted_12 = [\"disabled\"];\nconst _hoisted_13 = {\n  class: \"particles-background\",\n  ref: \"particlesContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 背景视频 \"), !$setup.videoLoaded ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    class: \"loading-spinner\"\n  }, null, -1 /* CACHED */)), _createElementVNode(\"p\", null, _toDisplayString(_ctx.$t('initial.loadingVideo')), 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 主要内容 \"), _withDirectives(_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"video\", {\n    ref: \"videoElement\",\n    class: \"intro-video\",\n    src: $setup.videoSrc,\n    muted: \"\",\n    preload: \"auto\",\n    onLoadeddata: _cache[0] || (_cache[0] = (...args) => $setup.onVideoLoaded && $setup.onVideoLoaded(...args)),\n    onEnded: _cache[1] || (_cache[1] = (...args) => $setup.onVideoEnded && $setup.onVideoEnded(...args))\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_6), _createCommentVNode(\" 涟漪效果覆盖层 \"), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"ripple-overlay\", {\n      'show-ripple': $setup.showRipple\n    }]),\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.handleClick && $setup.handleClick(...args)),\n    onMouseenter: _cache[3] || (_cache[3] = (...args) => $setup.startRipple && $setup.startRipple(...args)),\n    onMouseleave: _cache[4] || (_cache[4] = (...args) => $setup.stopRipple && $setup.stopRipple(...args))\n  }, [_createElementVNode(\"div\", _hoisted_7, null, 512 /* NEED_PATCH */)], 34 /* CLASS, NEED_HYDRATION */)]), _createCommentVNode(\" 标题和描述 \"), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"h1\", _hoisted_9, _toDisplayString(_ctx.$t('initial.title')), 1 /* TEXT */), _createElementVNode(\"h2\", _hoisted_10, _toDisplayString(_ctx.$t('initial.subtitle')), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_11, _toDisplayString(_ctx.$t('initial.description')), 1 /* TEXT */), _createCommentVNode(\" 进入按钮 \"), _createElementVNode(\"button\", {\n    class: _normalizeClass([\"enter-btn btn btn-primary btn-lg ripple\", {\n      'show': $setup.canEnter\n    }]),\n    onClick: _cache[5] || (_cache[5] = (...args) => $setup.enterSite && $setup.enterSite(...args)),\n    disabled: !$setup.canEnter\n  }, _toDisplayString(_ctx.$t('initial.enterPrompt')), 11 /* TEXT, CLASS, PROPS */, _hoisted_12)])], 512 /* NEED_PATCH */), [[_vShow, $setup.videoLoaded]]), _createCommentVNode(\" 粒子效果背景 \"), _createElementVNode(\"div\", _hoisted_13, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","videoLoaded","_hoisted_2","_createElementVNode","_hoisted_3","_toDisplayString","_ctx","$t","_hoisted_4","_hoisted_5","src","videoSrc","muted","preload","onLoadeddata","_cache","args","onVideoLoaded","onEnded","onVideoEnded","_normalizeClass","showRipple","onClick","handleClick","onMouseenter","startRipple","onMouseleave","stopRipple","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","canEnter","enterSite","disabled","_hoisted_12","_hoisted_13"],"sources":["/Users/Jordan/workSpace/temple/src/views/InitialPage.vue"],"sourcesContent":["<template>\n  <div class=\"initial-page fullscreen temple-bg\">\n    <!-- 背景视频 -->\n    <div class=\"video-container\" v-if=\"!videoLoaded\">\n      <div class=\"loading-placeholder\">\n        <div class=\"loading-spinner\"></div>\n        <p>{{ $t('initial.loadingVideo') }}</p>\n      </div>\n    </div>\n    \n    <!-- 主要内容 -->\n    <div class=\"content-wrapper\" v-show=\"videoLoaded\">\n      <div class=\"video-section\">\n        <video\n          ref=\"videoElement\"\n          class=\"intro-video\"\n          :src=\"videoSrc\"\n          muted\n          preload=\"auto\"\n          @loadeddata=\"onVideoLoaded\"\n          @ended=\"onVideoEnded\"\n        />\n        \n        <!-- 涟漪效果覆盖层 -->\n        <div \n          class=\"ripple-overlay\"\n          :class=\"{ 'show-ripple': showRipple }\"\n          @click=\"handleClick\"\n          @mouseenter=\"startRipple\"\n          @mouseleave=\"stopRipple\"\n        >\n          <div class=\"ripple-effect\" ref=\"rippleElement\"></div>\n        </div>\n      </div>\n      \n      <!-- 标题和描述 -->\n      <div class=\"title-section\">\n        <h1 class=\"main-title\">{{ $t('initial.title') }}</h1>\n        <h2 class=\"subtitle\">{{ $t('initial.subtitle') }}</h2>\n        <p class=\"description\">{{ $t('initial.description') }}</p>\n        \n        <!-- 进入按钮 -->\n        <button \n          class=\"enter-btn btn btn-primary btn-lg ripple\"\n          :class=\"{ 'show': canEnter }\"\n          @click=\"enterSite\"\n          :disabled=\"!canEnter\"\n        >\n          {{ $t('initial.enterPrompt') }}\n        </button>\n      </div>\n    </div>\n    \n    <!-- 粒子效果背景 -->\n    <div class=\"particles-background\" ref=\"particlesContainer\"></div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, onUnmounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { useI18n } from 'vue-i18n'\nimport { useAppStore } from '@/stores/app'\n\nexport default {\n  name: 'InitialPage',\n  setup() {\n    const router = useRouter()\n    const { t, locale } = useI18n()\n    const appStore = useAppStore()\n    \n    // 响应式数据\n    const videoElement = ref(null)\n    const rippleElement = ref(null)\n    const particlesContainer = ref(null)\n    const videoLoaded = ref(false)\n    const videoEnded = ref(false)\n    const showRipple = ref(false)\n    const canEnter = ref(false)\n    \n    // 视频源路径 - 这里先用占位符，等用户上传后替换\n    const videoSrc = ref('/videos/temple-intro.mp4')\n    \n    let rippleTimer = null\n    let particles = []\n    let animationFrame = null\n    \n    // 视频加载完成\n    const onVideoLoaded = () => {\n      videoLoaded.value = true\n      // 自动播放视频\n      setTimeout(() => {\n        if (videoElement.value) {\n          videoElement.value.play().catch(error => {\n            console.log('视频自动播放失败:', error)\n            // 如果自动播放失败，显示进入按钮\n            canEnter.value = true\n          })\n        }\n      }, 500)\n    }\n    \n    // 视频播放结束\n    const onVideoEnded = () => {\n      videoEnded.value = true\n      canEnter.value = true\n      showRipple.value = true\n    }\n    \n    // 开始涟漪效果\n    const startRipple = () => {\n      if (!canEnter.value) return\n      \n      showRipple.value = true\n      rippleTimer = setInterval(() => {\n        createRipple()\n      }, 1000)\n    }\n    \n    // 停止涟漪效果\n    const stopRipple = () => {\n      showRipple.value = false\n      if (rippleTimer) {\n        clearInterval(rippleTimer)\n        rippleTimer = null\n      }\n    }\n    \n    // 创建涟漪\n    const createRipple = () => {\n      if (!rippleElement.value) return\n      \n      const ripple = document.createElement('div')\n      ripple.className = 'ripple-wave'\n      rippleElement.value.appendChild(ripple)\n      \n      // 动画完成后移除元素\n      setTimeout(() => {\n        if (ripple.parentNode) {\n          ripple.parentNode.removeChild(ripple)\n        }\n      }, 2000)\n    }\n    \n    // 处理点击事件\n    const handleClick = () => {\n      if (canEnter.value) {\n        enterSite()\n      } else if (videoElement.value && videoElement.value.paused) {\n        // 如果视频暂停，点击播放\n        videoElement.value.play()\n      }\n    }\n    \n    // 进入网站\n    const enterSite = () => {\n      appStore.setLoading(true)\n      \n      // 添加退场动画\n      const content = document.querySelector('.content-wrapper')\n      if (content) {\n        content.style.transform = 'scale(1.1)'\n        content.style.opacity = '0'\n      }\n      \n      setTimeout(() => {\n        appStore.setLoading(false)\n        const nextRoute = locale.value === 'en-US' ? '/en/wish' : '/wish'\n        router.push(nextRoute)\n      }, 1000)\n    }\n    \n    // 初始化粒子效果\n    const initParticles = () => {\n      if (!particlesContainer.value) return\n      \n      const container = particlesContainer.value\n      const particleCount = 50\n      \n      for (let i = 0; i < particleCount; i++) {\n        const particle = {\n          x: Math.random() * window.innerWidth,\n          y: Math.random() * window.innerHeight,\n          size: Math.random() * 3 + 1,\n          speedX: (Math.random() - 0.5) * 0.5,\n          speedY: (Math.random() - 0.5) * 0.5,\n          opacity: Math.random() * 0.5 + 0.2\n        }\n        particles.push(particle)\n        \n        const particleElement = document.createElement('div')\n        particleElement.className = 'particle'\n        particleElement.style.cssText = `\n          position: absolute;\n          width: ${particle.size}px;\n          height: ${particle.size}px;\n          background: radial-gradient(circle, rgba(212, 175, 55, ${particle.opacity}) 0%, transparent 70%);\n          border-radius: 50%;\n          pointer-events: none;\n        `\n        container.appendChild(particleElement)\n      }\n      \n      animateParticles()\n    }\n    \n    // 粒子动画\n    const animateParticles = () => {\n      const container = particlesContainer.value\n      if (!container) return\n      \n      const particleElements = container.children\n      \n      particles.forEach((particle, index) => {\n        particle.x += particle.speedX\n        particle.y += particle.speedY\n        \n        // 边界检测\n        if (particle.x < 0 || particle.x > window.innerWidth) {\n          particle.speedX *= -1\n        }\n        if (particle.y < 0 || particle.y > window.innerHeight) {\n          particle.speedY *= -1\n        }\n        \n        // 更新DOM元素位置\n        const element = particleElements[index]\n        if (element) {\n          element.style.left = particle.x + 'px'\n          element.style.top = particle.y + 'px'\n        }\n      })\n      \n      animationFrame = requestAnimationFrame(animateParticles)\n    }\n    \n    // 组件挂载\n    onMounted(() => {\n      // 初始化应用状态\n      appStore.initializeFromStorage()\n      \n      // 初始化粒子效果\n      setTimeout(() => {\n        initParticles()\n      }, 1000)\n      \n      // 如果没有视频文件，直接显示进入按钮\n      setTimeout(() => {\n        if (!videoLoaded.value) {\n          videoLoaded.value = true\n          canEnter.value = true\n        }\n      }, 3000)\n    })\n    \n    // 组件卸载\n    onUnmounted(() => {\n      if (rippleTimer) {\n        clearInterval(rippleTimer)\n      }\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n    })\n    \n    return {\n      videoElement,\n      rippleElement,\n      particlesContainer,\n      videoLoaded,\n      videoEnded,\n      showRipple,\n      canEnter,\n      videoSrc,\n      onVideoLoaded,\n      onVideoEnded,\n      startRipple,\n      stopRipple,\n      handleClick,\n      enterSite\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.initial-page {\n  background: linear-gradient(135deg, \n    #d4af37 0%, \n    #f4d03f 25%, \n    #d4af37 50%, \n    #b8860b 75%, \n    #d4af37 100%\n  );\n  overflow: hidden;\n  position: relative;\n}\n\n.video-container,\n.content-wrapper {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n\n.loading-placeholder {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  color: white;\n  \n  .loading-spinner {\n    margin-bottom: 1rem;\n  }\n}\n\n.video-section {\n  position: relative;\n  max-width: 80%;\n  max-height: 60%;\n  margin-bottom: 2rem;\n}\n\n.intro-video {\n  width: 100%;\n  height: auto;\n  border-radius: var(--border-radius-xl);\n  box-shadow: var(--shadow-lg);\n}\n\n.ripple-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n  border-radius: var(--border-radius-xl);\n  transition: opacity var(--transition-normal);\n  \n  &.show-ripple {\n    background: rgba(255, 255, 255, 0.1);\n  }\n}\n\n.ripple-effect {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  border-radius: var(--border-radius-xl);\n}\n\n.ripple-wave {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 20px;\n  height: 20px;\n  background: rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  transform: translate(-50%, -50%) scale(0);\n  animation: rippleAnimation 2s ease-out infinite;\n}\n\n@keyframes rippleAnimation {\n  0% {\n    transform: translate(-50%, -50%) scale(0);\n    opacity: 1;\n  }\n  100% {\n    transform: translate(-50%, -50%) scale(20);\n    opacity: 0;\n  }\n}\n\n.title-section {\n  text-align: center;\n  color: white;\n  max-width: 600px;\n  padding: 0 2rem;\n}\n\n.main-title {\n  font-size: 3rem;\n  font-weight: 700;\n  margin-bottom: 1rem;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n  animation: fadeInUp 1s ease-out;\n}\n\n.subtitle {\n  font-size: 1.5rem;\n  font-weight: 500;\n  margin-bottom: 1rem;\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\n  animation: fadeInUp 1s ease-out 0.2s both;\n}\n\n.description {\n  font-size: 1.1rem;\n  margin-bottom: 2rem;\n  opacity: 0.9;\n  animation: fadeInUp 1s ease-out 0.4s both;\n}\n\n.enter-btn {\n  opacity: 0;\n  transform: translateY(20px);\n  transition: all var(--transition-normal);\n  \n  &.show {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  \n  &:hover {\n    transform: translateY(-2px) scale(1.05);\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\n  }\n}\n\n.particles-background {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 1;\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n// 响应式设计\n@media (max-width: 768px) {\n  .video-section {\n    max-width: 95%;\n    max-height: 50%;\n    margin-bottom: 1.5rem;\n  }\n  \n  .main-title {\n    font-size: 2rem;\n  }\n  \n  .subtitle {\n    font-size: 1.2rem;\n  }\n  \n  .description {\n    font-size: 1rem;\n  }\n  \n  .title-section {\n    padding: 0 1rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .main-title {\n    font-size: 1.75rem;\n  }\n  \n  .subtitle {\n    font-size: 1rem;\n  }\n  \n  .description {\n    font-size: 0.9rem;\n    margin-bottom: 1.5rem;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}